apply plugin: 'com.android.application'

repositories {
    maven {
        url "https://raw.github.com/reversecoder/rc-permission-androidstudio/snapshots"
    }
    maven {
        url "https://raw.github.com/reversecoder/rc-librarydemo-androidstudio/snapshots"
    }
    maven {
        url "https://raw.github.com/reversecoder/rc-logger-demo/snapshots"
    }
}

android {

    signingConfigs {
        releaseConfig {
            try {
                keyAlias 'keydata.keystore'
                keyPassword KEY_PASSWORD
                storeFile file('../misc/keydata.keystore')
                storePassword KEYSTORE_PASSWORD
            } catch (ex) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    compileSdkVersion appCompileSdkVersion
    buildToolsVersion appBuildToolsVersion

    defaultConfig {
        applicationId "tech.codegarage.quotes"
        minSdkVersion appMinSdkVersion
        targetSdkVersion appTargetSdkVersion
        versionCode appVersionCode
        versionName appVersionName

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

//        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"

            shrinkResources false
            minifyEnabled false
            debuggable true

            //For single file
//            proguardFile 'litepal.pro'

            //For all files
            proguardFiles fileTree(dir: "rules", include: ["*.pro"]).asList().toArray()

//            signingConfig signingConfigs.releaseConfig
        }
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false

            //For single file
//            proguardFile 'litepal.pro'


            //For all files
            proguardFiles fileTree(dir: "rules", include: ["*.pro"]).asList().toArray()

            signingConfig signingConfigs.releaseConfig
        }
    }

    lintOptions {
        disable 'MissingTranslation'
        disable "ResourceType"
        abortOnError false
    }

    flavorDimensions "default"
    productFlavors {
        english {
            applicationIdSuffix ".en"
            minSdkVersion appMinSdkVersion
            targetSdkVersion appTargetSdkVersion
            versionCode appVersionCode
            versionName appVersionName

            multiDexEnabled true
            vectorDrawables.useSupportLibrary = true

            signingConfig signingConfigs.releaseConfig
        }
        deutsch {
            applicationIdSuffix ".de"
            minSdkVersion appMinSdkVersion
            targetSdkVersion appTargetSdkVersion
            versionCode appVersionCode
            versionName appVersionName

            multiDexEnabled true
            vectorDrawables.useSupportLibrary = true

            signingConfig signingConfigs.releaseConfig
        }
        bengali {
            applicationIdSuffix ".bn"
            minSdkVersion appMinSdkVersion
            targetSdkVersion appTargetSdkVersion
            versionCode appVersionCode
            versionName appVersionName

            multiDexEnabled true
            vectorDrawables.useSupportLibrary = true

            signingConfig signingConfigs.releaseConfig
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->

            def stringsFile = android.sourceSets.main.res.sourceFiles.find {
                it.name.equals 'strings.xml'
            }
            def appName = "Quote"
//            def appName = new XmlParser().parse(stringsFile).string.find { it.@name.equals 'app_name' }.text()
            def separator = "_"
            def flavor = variant.getFlavorName().equalsIgnoreCase("bengali") ? "bn" : variant.getFlavorName().substring(0, 2)
            def version = variant.versionName
            def buildType = variant.baseName.split("-")[1]
            def releaseApkName = appName + separator + flavor + separator + version + separator + buildType + ".apk"
            outputFileName = releaseApkName
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    //test libraries
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
//    testCompile 'junit:junit:4.12'

    //gradle libraries
    compile "com.android.support:appcompat-v7:$supportlibraryVersion"
    compile "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.android.support:multidex:$multiDexVersion"

    compile 'com.reversecoder.permission:rc-permission:1.0.1-SNAPSHOT'
    compile 'com.reversecoder.library:rc-library:1.0.1-SNAPSHOT'
    compile 'com.reversecoder.logger:rc-logger:1.0.1-SNAPSHOT'

    //library projects
    compile project(":ribblemenu")
    compile project(":easyrecyclerview")
    compile project(":stickyindex")
    compile project(":wavesidebar")
    compile project(":glazyviewpager")
    compile project(":aboutbox")
    compile project(":contextmenu")
    compile project(":attributionpresenter")
    compile project(":sherlock")
    compile project(":verticalappintro")
    compile project(":shaperipple")
    compile project(":cookiebar2")
    compile project(":localechanger")
    compile project(":updatechecker")
    compile project(":multicolortextview")
    compile project(":flipview")
    compile project(":gcm")
    compile project(":androidviewanimations")
    compile project(":litepal")
    compile project(":bungee")
    compile project(":scheduler")
    compile project(":cyclemenu")
    compile project(":lottie")
    compile project(":progresslayout")
//    compile project(":fillme")
//    compile project(":sugar")
//    compile project(":foldablelayout")
//    compile project(":tutors")
//    compile project(":kenburnsview")
//    compile project(":arclayout")
//    compile project(":cardslider")
//    compile project(":maskprogressview")
//    compile project(":fabulousfilter")
}